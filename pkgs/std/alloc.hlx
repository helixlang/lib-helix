//===----------------------------------------- Helix ------------------------------------------===//
//                                                                                                //
// Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).        //
// You are allowed to use, modify, redistribute, and create derivative works, even for commercial //
// purposes, provided that you give appropriate credit, and indicate if changes were made.        //
// For more information, please visit: https://creativecommons.org/licenses/by/4.0/               //
//                                                                                                //
// SPDX-License-Identifier: CC-BY-4.0                                                             //
// Copyright (c) 2024 (CC BY 4.0)                                                                 //
//                                                                                                //
//===------------------------------------------------------------------------------------------===//
import types::{Allocator, AllocatorStats};

ffi "c++" import "";

class DefaultAllocator derives Allocator {
    fn DefaultAllocator(self) derives default; // call the default constructor for all members.
    fn alloc(self, size: usize, alignment: usize) -> *void {}
    fn dealloc(self, ptr: *void, size: usize, alignment: usize) {}
    fn realloc(self, ptr: *void, old_size: usize, new_size: usize, alignment: usize) -> *void {}

    #[override]
    fn alloc_d(self, size: usize) -> *void {
        return self.alloc(size, 16);
    }

    #[override]
    fn realloc_d(self, ptr: *void, old_size: usize, new_size: usize) -> *void {
        return self.realloc(ptr, old_size, new_size, 16);
    }

    #[override]
    fn get_stats(self) -> AllocatorStats {
        return AllocatorStats::new();
    }

    #[override]
    fn can_alloc(self, size: usize, alignment: usize) {
        return true;
    }

    //===---- vars ----===//
    priv eval let stats = AllocatorStats::new();
}