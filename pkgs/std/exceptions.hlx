//===----------------------------------------- Helix ------------------------------------------===//
//                                                                                                //
// Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).        //
// You are allowed to use, modify, redistribute, and create derivative works, even for commercial //
// purposes, provided that you give appropriate credit, and indicate if changes were made.        //
// For more information, please visit: https://creativecommons.org/licenses/by/4.0/               //
//                                                                                                //
// SPDX-License-Identifier: CC-BY-4.0                                                             //
// Copyright (c) 2024 (CC BY 4.0)                                                                 //
//                                                                                                //
// version 0.0.1
//===------------------------------------------------------------------------------------------===//

define __LIB_EXCEPTIONS: 0xa0;
define __LIB_EXCEPTIONS_VERSION: 0b00 << 0b00 << 0b01;
define __LIB_UNWIND: 0xa0;

/* 2 kind of exceptions here

panic -> compiler calls a panic_handle with a panic frame and the expr

- panic needs to remain interoperable with the C++ exceptions and the C++ stack unwinding
*/

// without __LIB_UNWIND panic frames are not unwound

eval if define __LIB_UNWIND {
    class PanicFrame requires <T> {
        let prev: *PanicFrame;
        let next: *PanicFrame;
        let data: *T;
    }
} else {
    class PanicFrame requires <T> {
        let data: *T;
    }
}

class Exception {
    fn Exception(self) {}

    fn Exception(self, msg: string) {}

    fn as string(self) -> string {}
}

#[panic()]
fn panic_handle(frame: *PanicFrame<T>, expr: T) requires <T> {
    eval if T derives Exception {
        // handle panic
    } else {
        // handle panic
    }
}

#[panic()]
fn panic_handle(expr: T) requires <T> {
    // handle panic
}

#[panic()]
fn panic_handle() {
    // handle panic
}
