//===----------------------------------------- Helix ------------------------------------------===//
//                                                                                                //
// Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).        //
// You are allowed to use, modify, redistribute, and create derivative works, even for commercial //
// purposes, provided that you give appropriate credit, and indicate if changes were made.        //
// For more information, please visit: https://creativecommons.org/licenses/by/4.0/               //
//                                                                                                //
// SPDX-License-Identifier: CC-BY-4.0                                                             //
// Copyright (c) 2024 (CC BY 4.0)                                                                 //
//                                                                                                //
//===------------------------------------------------------------------------------------------===//

#[link-time]
import types::{Allocator};
import alloc::{DefaultAllocator};

module v1 { // already in the std module hence only v1 needed
    class list requires <T, const N: usize = 0> {
        fn clear(self);
        fn insert(self, val: T, index: usize = 0);
        fn pop(self, index: usize = 0) -> T;
        fn remove(self, val: T, const all_matches: bool = false);
        fn reverse(self) -> yield &T; // generator of T
        fn sort(self, algo: fn (T) -> T) -> &self;
        fn data(self) -> *ListNode;
        fn iter(self) -> yield T;
        const fn copy(self) -> list<T>;
        const fn count(self, val: T) -> usize;
        const fn index_of(self, val: T, const all_matches: bool = false) -> int | list<int>;
        const fn min(self) -> T; // inst of T with list occurrences
        const fn max(self) -> T; // inst of T with most occurrences
        const fn length(self) -> usize;

        op + fn append(self, val: T);
        op + fn extend(self, other: list<T>);
        op [] fn get(self, index: usize) -> &T;

        //==--- constructors ---==//
        fn list(self);
        fn list(self, other: list<T>);
        fn list(self, ...values: T);

        //==--- priv ---==//
        priv struct ListNode requires <T> if T derives string {
            let next: *ListNode? = &null;
            let data: T?         = null;
            eval define DISABLE_SAFETY: ... else {
                let check: bool = true; // verify integrity of data if safety is on.
            }
        } // size = T + 8 bytes

        //==--- vars ---==//
        priv let head_ptr: *ListNode;
        priv let len: usize = 1;
        priv let cap: usize = 1;
        priv let allocator: std::types::Allocator = std::alloc::DefaultAllocator;
    }
}