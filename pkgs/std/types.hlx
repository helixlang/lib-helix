//===----------------------------------------- Helix ------------------------------------------===//
//                                                                                                //
// Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).        //
// You are allowed to use, modify, redistribute, and create derivative works, even for commercial //
// purposes, provided that you give appropriate credit, and indicate if changes were made.        //
// For more information, please visit: https://creativecommons.org/licenses/by/4.0/               //
//                                                                                                //
// SPDX-License-Identifier: CC-BY-4.0                                                             //
// Copyright (c) 2024 (CC BY 4.0)                                                                 //
//                                                                                                //
//===------------------------------------------------------------------------------------------===//
//
// The `Allocator` interface defines the core memory allocation strategies used throughout
// Helix. It is designed to be flexible, allowing various memory allocation strategies
// to be implemented, while ensuring that all allocators conform to a common interface.
//
// This interface supports:
// - Allocation with alignment: Ensures memory is allocated at specific byte boundaries.
// - Deallocation: Frees memory that was previously allocated.
// - Reallocation: Resizes an existing block of memory.
// - Error handling: Returns a status code or result to indicate success or failure.
// - Memory statistics (optional): Allows tracking of allocated memory blocks.
//
// Implementations of this interface can range from simple heap allocators to custom memory pools
// and arenas.
//
//===------------------------------------------------------------------------------------------===//

import folder::{
    file::*,
    file2,
    file3,
}

// the following info needs to be extracted:
// - vec of singleimports including the base path
// the whole thing needs to be normalized to single imports only

interface Allocator {
    // allocates a block of memory of at least `size` bytes with the specified alignment.
    // returns a pointer to the allocated memory or a null pointer on failure.
    fn alloc(self, size: usize, alignment: usize) -> *void {}

    // deallocates a block of memory previously allocated by `alloc`.
    // the pointer `ptr` must point to the beginning of a block returned by `alloc`.
    fn dealloc(self, ptr: *void, size: usize, alignment: usize) {}

    // reallocates a block of memory to a new size, with the specified alignment.
    // the pointer `ptr` must point to the beginning of a block returned by `alloc`.
    // returns a pointer to the newly allocated memory or a null pointer on failure.
    fn realloc(self, ptr: *void, old_size: usize, new_size: usize, alignment: usize) -> *void {}

    // optional: allocates a block of memory with default alignment (e.g., 8 or 16 bytes).
    fn alloc_d(self, size: usize) -> *void {
        if !self.can_alloc(size, 16) {
            panic SegmentationFault(f"alloc: cant allocate the specified:size}.");
        }
    
        return self.alloc(size, 16);  // default to 16-byte alignment
    }

    // optional: reallocates memory with default alignment.
    fn realloc_d(self, ptr: *void, old_size: usize, new_size: usize) -> *void {
        return self.realloc(ptr, old_size, new_size, 16);  // default to 16-byte alignment
    }

    // optional: retrieves statistics about the allocator's memory usage.
    fn get_stats(self) -> AllocatorStats {
        return AllocatorStats::new();  // return a default stats object
    }

    // checks if the allocator can satisfy an allocation of a given size and alignment.
    // useful for checking if the allocator is capable before attempting an allocation.
    fn can_alloc(self, size: usize, alignment: usize) -> bool {
        return true;  // by default, assume the allocator can handle it
    }
}

// structure to hold memory statistics (optional feature)
struct AllocatorStats {
    let total_allocations:   usize;
    let total_deallocations: usize;
    let currently_allocated: usize;
    let max_allocated:       usize;
}