//===----------------------------------------- Helix ------------------------------------------===//
//                                                                                                //
// Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).        //
// You are allowed to use, modify, redistribute, and create derivative works, even for commercial //
// purposes, provided that you give appropriate credit, and indicate if changes were made.        //
// For more information, please visit: https://creativecommons.org/licenses/by/4.0/               //
//                                                                                                //
// SPDX-License-Identifier: CC-BY-4.0                                                             //
// Copyright (c) 2024 (CC BY 4.0)                                                                 //
//                                                                                                //
//===------------------------------------------------------------------------------------------===//
//
// This file is part of the core Helix standard library and defines the `string` type, which is the
// primary string handling class in Helix. The `string` type provides a comprehensive set of
// methods for string manipulation, including slicing, concatenation, searching, and formatting.
//
// The `string` type is designed to be intuitive and powerful, offering a robust set of
// functionalities for efficient string operations. Strings in Helix are immutable by default,
// ensuring that any operation that alters the string returns a new `string` instance, preserving
// the original.
//
// Key Features:
// - **Immutable by Default**: Strings are immutable, meaning that any modification results in a
//   new `string` instance rather than altering the original string.
// - **Extensive Method Suite**: Includes a wide range of methods for common string operations,
//   such as `find`, `replace`, `split`, and `join`.
// - **Slicing Support**: Slicing syntax allows for extracting substrings, with support for both
//   positive and negative indices, as well as step values.
// - **Unicode Compliance**: Fully supports Unicode, ensuring that `string` can handle diverse text
//   from different languages and scripts.
// - **Seamless Integration**: The `string` type is deeply integrated with Helix's type system and
//   standard library, facilitating smooth interaction with other types and functions.
//
// The following sections detail the implementation of the `string` type, including its
// constructors, methods, and special behaviors. For a detailed guide, please refer to the official
// Helix documentation.
//
// FIXME: change shared to static
//
//===------------------------------------------------------------------------------------------===//

import exceptions::RuntimeError;
import std::types::Allocator;

define check_safety_mode! {
    eval define DISABLE_SAFETY {
        return;
    }
};

ffi "c++" import "stdio.h";

ffi "py" fn c_print(str: string) {
    printf(str);
}

#[lib(internal)] // Hide from libhlx to prevent the use of FFI with any STD components
class string {
    fn string(self) {
        
    }

    fn string(self, c_str: const char*) {
        
    }

    fn string(self, c: char) {
        
    }

    fn string(self, other: const string&) {
        
    }

    fn string(self, chars: list<const char>) {
        
    }

    fn repeat(c: char, n: int) -> string {
        if n <= 0 {
            panic RuntimeError("repeat: count must be greater than 0");
        }

        return string(c) * n;
    }

    op * fn mul(self, n: int) -> string {
        if n <= 0 {
            return string();  // Return an empty string if n is 0 or negative
        }

        let result = string();  // Start with an empty string
        for i in 0..n {
            result += self;  // Concatenate the original string n times
        }

        return result;
    }

    op + fn add(self, other: string) -> string {
        self.append(other);
        return self;
    }

    fn length(self) -> usize {
        return len;
    }

    fn into(self) -> const list<const char> {
        return (self.data as const list<const char>); // the cast is to make it immutable
    }

    fn check_access(self) -> void | noreturn! {
        check_safety_mode!;

        // if the DISABLE_SAFETY macro is not defined (enable safety)
        if (self.data.length() != self.len)
        || (self.data.length() >  self.len)
        || (self.data.length() >  self.cap) {
            unsafe panic SegmentationFault("string: bad access, string data corrupted, indicative of buffer overflow");
        }
    }

    //==--- priv ---==//
    priv fn allocate(n: usize) { // takes a size to allocate into the string
        self.check_access();

        try {
            self.allocator.alloc(n, (n % 2) as i8);
        } catch (BadAlloc as e) {
            panic BadAlloc("string::allocate: allocator failed.") derives e;
        }

        self.cap += n + ((n % 2) as i8);
    }

    priv fn append(self, other: string) {
        self.check_access();
        self.allocate(other.length());

        let term: const char = self.data.pop();
        self.data.extend(other.into())
    }
    
    //==--- vars ---==//
    priv let data: list<const char> = ['\0'];
    priv let len:       usize       = 0;
    priv let cap:       usize       = 1;
    priv let allocator: Allocator   = std::DefaultAllocator;

}