//===----------------------------------------- Helix ------------------------------------------===//
//                                                                                                //
// Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).        //
// You are allowed to use, modify, redistribute, and create derivative works, even for commercial //
// purposes, provided that you give appropriate credit, and indicate if changes were made.        //
// For more information, please visit: https://creativecommons.org/licenses/by/4.0/               //
//                                                                                                //
// SPDX-License-Identifier: CC-BY-4.0                                                             //
// Copyright (c) 2024 (CC BY 4.0)                                                                 //
//                                                                                                //
//===------------------------------------------------------------------------------------------===//

import types::Allocator;
import alloc::DefaultAllocator;

class IntNode {
    let data: int;
    let link: *IntNode? = &null;

    fn IntNode(self, data: int, link: *IntNode?) {
        self.data = data;
        self.link = link;
    }

    fn getData(self) -> int {
        return self.data;
    }

    fn getLink(self) -> *IntNode? {
        return self.link;
    }

    fn setData(self, new_data: int) {
        self.data = new_data;
    }

    fn setLink(self, new_link: *IntNode?) {
        self.link = new_link;
    }

    fn addNodeAfter(self, new_data: int) -> *IntNode {
        let link = IntNode(new_data, self.link);
        self.link = &link;
        return &link;
    }
}

fn listLength(head: &IntNode) -> int {
    let count = 0;
    let *current = head;

    while (*current).getLink() != &null {
        count  += 1;
        current = current.getLink();
    }

    return count;
}

fn listSearch(head: *IntNode, target: int) -> *IntNode {
    let *current = head;

    while (*current).getLink() != &null {
        if (*current).getData() == target {
            return current;
        }
        current = current.getLink();
    }

    return &null;
}

fn listRemoveNode(head: *IntNode, target: int) {
    // remove and free

    let *current = head;
    let *previous = &null;
    
    finally:
        try:
            // free memory after scope or error
            Allocator::free(current);
        catch:
            // a SegmentationFaultError is diffrent from a SIGSEGV
            // it is a safe way to handle segfaults as software errors
            // and not hardware errors like SIGSEGV.
            panic SegmentationFaultError("Failed to free memory");

    while (*current).getLink() != &null {
        if (*current).getData() == target {
            (*previous).setLink((*current).getLink());
            return;
        }

        previous = current;
        current  = current.getLink();
    }
}

fn main(a: const int,  a: int | float) {
    let head: IntNode = IntNode(1, &null);
    let  *tail = &head;

    for i in 2..100 {
        tail = tail.addNodeAfter(i);
    }

    let length:  int      = listLength(&head);
    let target: *IntNode? = listSearch(&head, 50);
}


