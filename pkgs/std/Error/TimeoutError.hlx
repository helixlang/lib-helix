///--- The Helix Project ------------------------------------------------------------------------///
///                                                                                              ///
///   Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).    ///
///   You are allowed to use, modify, redistribute, and create derivative works, even for        ///
///   commercial purposes, provided that you give appropriate credit, and indicate if changes    ///
///   were made.                                                                                 ///
///                                                                                              ///
///   For more information on the license terms and requirements, please visit:                  ///
///     https://creativecommons.org/licenses/by/4.0/                                             ///
///                                                                                              ///
///   SPDX-License-Identifier: CC-BY-4.0                                                         ///
///   Copyright (c) 2024 The Helix Project (CC BY 4.0)                                           ///
///                                                                                              ///
///-------------------------------------------------------------------------------- Lib-Helix ---///

/// Error when an operation exceeds its allowed time limit
default class TimeoutError derives std::Error::BaseError {
    priv var msg: string;
    priv var duration_ms: u64;

    /// Constructor with custom message
    fn TimeoutError(self, msg: string) {
        self.msg = std::Memory::move(msg);
        self.duration_ms = 0;
    }
    
    /// Constructor with operation and timeout duration
    fn TimeoutError(self, operation: string, duration_ms: u64) {
        var builder = std::Text::StringBuilder();
        builder.append("Operation '");
        builder.append(operation);
        builder.append("' timed out after ");
        builder.append(duration_ms);
        builder.append(" ms");
        self.msg = builder.to_string();
        self.duration_ms = duration_ms;
    }
    
    /// Default constructor
    default fn TimeoutError(self);

    /// Virtual destructor
    override default op delete fn (self);
    
    /// Get a string representation for panic
    override const op panic fn (self) -> string {
        return self.msg;
    }
    
    /// Convert the error to a string
    override const op as fn (self) -> string {
        return self.msg;
    }
    
    /// Get the duration in milliseconds
    const fn get_duration_ms(self) -> u64 {
        return self.duration_ms;
    }
}