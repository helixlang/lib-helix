///--- The Helix Project ------------------------------------------------------------------------///
///                                                                                              ///
///   Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).    ///
///   You are allowed to use, modify, redistribute, and create derivative works, even for        ///
///   commercial purposes, provided that you give appropriate credit, and indicate if changes    ///
///   were made.                                                                                 ///
///                                                                                              ///
///   For more information on the license terms and requirements, please visit:                  ///
///     https://creativecommons.org/licenses/by/4.0/                                             ///
///                                                                                              ///
///   SPDX-License-Identifier: CC-BY-4.0                                                         ///
///   Copyright (c) 2024 The Helix Project (CC BY 4.0)                                           ///
///                                                                                              ///
///-------------------------------------------------------------------------------- Lib-Helix ---///

/// Error that occurs when an assertion fails
default class AssertionError derives std::Error::BaseError {
    priv var msg: string;
    priv var file_name: string;
    priv var line_number: i32;

    /// Constructor with a custom error message
    fn AssertionError(self, msg: string) {
        self.msg = std::Memory::move(msg);
        self.file_name = "";
        self.line_number = -1;
    }
    
    /// Constructor with file and line information
    fn AssertionError(self, msg: string, file_name: string, line_number: i32) {
        self.msg = std::Memory::move(msg);
        self.file_name = std::Memory::move(file_name);
        self.line_number = line_number;
    }
    
    /// Constructor with expression that failed
    fn AssertionError(self, expression: string, file_name: string, line_number: i32) {
        self.msg = f"Assertion failed: {expression}";
        self.file_name = std::Memory::move(file_name);
        self.line_number = line_number;
    }
    
    /// Default constructor
    default fn AssertionError(self);

    /// Virtual destructor
    override default fn op delete (self);

    priv fn generate_string(self) -> string {
        if (!self.file_name.empty() && self.line_number >= 0) {
            return f"{self.msg} in file {self.file_name} at line {self.line_number}";
        }
        return self.msg;
    }
    
    /// Get a string representation for panic
    override const fn op panic (self) -> string {
        return self.generate_string();
    }
    
    /// Convert the error to a string
    override const fn op as (self) -> string {
        return self.generate_string();
    }
    
    /// Get the file name where the assertion failed
    const fn get_file_name(self) -> string {
        return self.file_name;
    }
    
    /// Get the line number where the assertion failed
    const fn get_line_number(self) -> i32 {
        return self.line_number;
    }
}