///--- The Helix Project ------------------------------------------------------------------------///
///                                                                                              ///
///   Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).    ///
///   You are allowed to use, modify, redistribute, and create derivative works, even for        ///
///   commercial purposes, provided that you give appropriate credit, and indicate if changes    ///
///   were made.                                                                                 ///
///                                                                                              ///
///   For more information on the license terms and requirements, please visit:                  ///
///     https://creativecommons.org/licenses/by/4.0/                                             ///
///                                                                                              ///
///   SPDX-License-Identifier: CC-BY-4.0                                                         ///
///   Copyright (c) 2024 The Helix Project (CC BY 4.0)                                           ///
///                                                                                              ///
///-------------------------------------------------------------------------------- Lib-Helix ---///

class AttributeError derives std::Error::BaseError {
    priv var msg: string;

    fn AttributeError(self, msg: string) {
        self.msg = std::Memory::move(msg);
    }
    
    default fn AttributeError(self);
    default fn AttributeError(self, other: std::Memory::reference::<AttributeError>);
    default fn AttributeError(self, other: std::Memory::move_reference::<AttributeError>);
    default op = fn (self, other: std::Memory::reference::<AttributeError>) -> std::Memory::reference::<AttributeError>;
    default op = fn (self, other: std::Memory::move_reference::<AttributeError>) -> std::Memory::reference::<AttributeError>;

    override default op delete fn (self);
    
    override const op panic fn (self) -> string {
        return self.msg;
    }
    
    override const op as fn (self) -> string {
        return msg;
    }
}