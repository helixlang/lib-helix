///--- The Helix Project ------------------------------------------------------------------------///
///                                                                                              ///
///   Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).    ///
///   You are allowed to use, modify, redistribute, and create derivative works, even for        ///
///   commercial purposes, provided that you give appropriate credit, and indicate if changes    ///
///   were made.                                                                                 ///
///                                                                                              ///
///   For more information on the license terms and requirements, please visit:                  ///
///     https://creativecommons.org/licenses/by/4.0/                                             ///
///                                                                                              ///
///   SPDX-License-Identifier: CC-BY-4.0                                                         ///
///   Copyright (c) 2024 The Helix Project (CC BY 4.0)                                           ///
///                                                                                              ///
///-------------------------------------------------------------------------------- Lib-Helix ---///

/// Base class for network-related errors
default class NetworkError derives std::Error::BaseError {
    priv var msg: string;
    priv var error_code: i32;

    /// Constructor with a custom error message
    fn NetworkError(self, msg: string) {
        self.msg = std::Memory::move(msg);
        self.error_code = 0;
    }
    
    /// Constructor with error message and code
    fn NetworkError(self, msg: string, error_code: i32) {
        self.msg = std::Memory::move(msg);
        self.error_code = error_code;
    }
    
    /// Default constructor
    default fn NetworkError(self);

    /// Virtual destructor
    override default op delete fn (self);

    priv fn generate_string(self) -> string {
        if (self.error_code != 0) {
            return f"{self.msg} (error code: {self.error_code})";
        }

        return self.msg;
    }
    
    /// Get a string representation for panic
    override const op panic fn (self) -> string {
        return self.generate_string();
    }
    
    /// Convert the error to a string
    override const op as fn (self) -> string {
        return self.generate_string();
    }
    
    /// Get the error code
    const fn get_error_code(self) -> i32 {
        return self.error_code;
    }
}