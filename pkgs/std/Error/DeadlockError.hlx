///--- The Helix Project ------------------------------------------------------------------------///
///                                                                                              ///
///   Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).    ///
///   You are allowed to use, modify, redistribute, and create derivative works, even for        ///
///   commercial purposes, provided that you give appropriate credit, and indicate if changes    ///
///   were made.                                                                                 ///
///                                                                                              ///
///   For more information on the license terms and requirements, please visit:                  ///
///     https://creativecommons.org/licenses/by/4.0/                                             ///
///                                                                                              ///
///   SPDX-License-Identifier: CC-BY-4.0                                                         ///
///   Copyright (c) 2024 The Helix Project (CC BY 4.0)                                           ///
///                                                                                              ///
///-------------------------------------------------------------------------------- Lib-Helix ---///

import ConcurrencyError;

default class DeadlockError derives ConcurrencyError {
    fn DeadlockError(self, resource1: string, resource2: string) {
        ConcurrencyError.ConcurrencyError(f"Deadlock detected between resources: \'{resource1}\' and \'{resource2}\'");
    }
    
    fn DeadlockError(self, thread_ids: vec::<u64>) {
        var str = "Deadlock detected between threads: ";

        for (var i = 0; i < thread_ids.length(); i++) {
            if (i > 0) {
                str += ", ";
            }

            str += std::to_string(thread_ids[i]);
        }

        ConcurrencyError.ConcurrencyError(str + ".");
    }
    
    fn DeadlockError(self, msg: string) {
        ConcurrencyError.ConcurrencyError(msg);
    }
    
    fn DeadlockError(self) {
        ConcurrencyError.ConcurrencyError("Deadlock detected");
    }

    override default op delete fn (self);
}