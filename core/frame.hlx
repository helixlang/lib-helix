///--- The Helix Project ------------------------------------------------------------------------///
///                                                                                              ///
///   Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).    ///
///   You are allowed to use, modify, redistribute, and create derivative works, even for        ///
///   commercial purposes, provided that you give appropriate credit, and indicate if changes    ///
///   were made.                                                                                 ///
///                                                                                              ///
///   For more information on the license terms and requirements, please visit:                  ///
///     https://creativecommons.org/licenses/by/4.0/                                             ///
///                                                                                              ///
///   SPDX-License-Identifier: CC-BY-4.0                                                         ///
///   Copyright (c) 2024 The Helix Project (CC BY 4.0)                                           ///
///                                                                                              ///
///-------------------------------------------------------------------------------- Lib-Helix ---///
#[trivially_import(true)]

ffi "c++" import "include/runtime/__panic/panic.hh";

fn std::Panic::Frame::initialize(const obj: unsafe *T)
  requires <T> if T has std::Interface::ClassType {
    eval if __inline_cpp("Panic::Interface::PanickingStatic<T>") {
        _reason = __inline_cpp("T::operator$panic()");
    } else if __inline_cpp("Panic::Interface::PanickingInstance<T>") {
        _reason = __inline_cpp("(*obj).operator$panic()");
    } else {
        static_assert(
            __inline_cpp("Panic::Interface::Panicking<T>"),
            r"Frame invoked with a type that lacks a panic operator. Ensure the type "
             "declares `class ... impl Panic::Panicking` and implements either `op "
             "panic fn(self) -> string` or the static equivalent."
        );
    }

    let object: unsafe *T = &null;

    static_assert(
        __inline_cpp("libcxx::is_copy_constructible_v<T>") || __inline_cpp("libcxx::is_move_constructible_v<T>"),
         r"Frame invoked with a type that is not copy or move constructible.");

    try {
        eval if (__inline_cpp("libcxx::is_move_constructible_v<T>")) {
            object        = _NEW(T(std::Memory::move(*obj)));
            self.context = Panic::FrameContext(object);
        } else if (__inline_cpp("libcxx::is_copy_constructible_v<T>")) {
            object        = _NEW(T(*obj));
            self.context = Panic::FrameContext(object);
        }
    } catch {
        delete object;
        std::crash(std::Error::RuntimeError("Failed to initialize panic frame."));
    }
}

const fn std::Panic::Frame::file() -> string {
    return self._file;
}

const fn std::Panic::Frame::line() -> usize {
    return self._line;
}

const fn std::Panic::Frame::reason() -> string {
    return self._reason;
}

const fn std::Panic::Frame::get_context() -> *std::Panic::FrameContext {
    return &context;
}