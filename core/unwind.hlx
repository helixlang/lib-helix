#[trivially_import(true)] // prevents wrapping IR in a `unwind` module, keeping the handler globally accessible

/// \file
/// Implements the global panic handler for the Helix runtime.
///
/// This file defines the `_HX_FN_Vi_Q5_13_helixpanic_handler_Q3_5_5_stdPanicFrame_C_PK_Rv` function to manage
/// runtime panics. It logs error details and provides debugging information while ensuring
/// inter-operation with C++ libraries through FFI.
///
/// Attributes:
/// - `#[trivially_import(true)]`: Prevents the compiler from wrapping the Intermediate Representation (IR) in a module.
/// - `ffi "c++" import "include/lang/panic.h";`: Links to the C++ runtime header for compatibility.
///
/// \note This panic handler is globally accessible to any Helix module that wildcard-imports `core.hlx`.

ffi "c++" import "include/lang/panic.hh";

ffi "c++" import "stdio.h";
ffi "c++" import "stdlib.h";
ffi "c++" import "fcntl.h";
ffi "c++" import "unistd.h";

/// \brief Displays runtime panic details and signals program termination.
///
/// This function is invoked when the program encounters an unrecoverable error.
/// It logs the file, line, and reason for the panic, providing developers with
/// actionable information for debugging.
///
/// \param frame
///   A pointer to `std::Panic::Frame` that contains details about the panic:
///   - `file`:   The name of the file where the panic occurred.
///   - `line`:   The line number where the panic was triggered.
///   - `reason`: A description of the reason for the panic.
///
/// \details
/// The function performs the following tasks:
/// 1. Logs the panic details, including the file, line, and reason.
/// 2. Displays a message to signal that the program cannot recover.
///
/// \note The `#[trivially_import(true)]` attribute ensures global visibility of the handler function.
///
/// \see include/lang/panic.hh for C++ runtime definitions.
fn _HX_FN_Vi_Q5_13_helixpanic_handler_Q3_5_5_stdPanicFrame_C_PK_Rv(const frame: *std::Panic::Frame) {
    const file_path: string = (*frame).file();
    const message:   string = (*frame).reason();
    const error_t:   string = (*frame).get_context().type_name();
    const line_no:   usize  = (*frame).line();
    
    const bold:        string = "\033[1m";
    const red:         string = "\033[31m";
    const reset:       string = "\033[0m";
    const cyan:        string = "\033[36m";
    const green:       string = "\033[32m";
    const white:       string = "\033[97m";
    const yellow:      string = "\033[33m";
    const light_green: string = "\033[92m";

    const fd: i32 = open(file_path.c_str(), O_RDONLY);
    finally:
        if fd >= 0: close(fd);

    let get_line_from_file = fn (fd: i32, line_number: usize) -> string? {
        const BUFFER_SIZE: usize = 4096;

        let buffer:       *char  = &null;
        let bytes_read:    isize = 0;
        let current_line:  usize = 1;
        let line:          string;

        if fd < 0 {
            return null;
        }
        
        buffer = malloc(BUFFER_SIZE) as unsafe *char;
        finally: if buffer != &null: free(buffer);

        if buffer == &null: return null;

        while (bytes_read = read(fd, buffer, BUFFER_SIZE)) > 0 {
            for let i: isize = 0; i < bytes_read; ++i {
                let ch: char = buffer[i];
                
                if ch == '\n' {
                    if current_line == line_number:
                        return line;

                    line.clear();
                    ++current_line;
                } else {
                    line += ch;
                }
            }
        }

        if current_line == line_number:
            return line;

        return null;
    };

    if fd < 0 {
        print(f"{bold}{red}{error_t}:{reset}{white} file descriptor lost for {light_green}'{file_path}'{reset}. Maybe the file was moved or deleted?");
        print(f"    {bold}{red}panic reason:{reset}{white} {message}");
        (*frame).get_context().crash();
    }

    print(f"{bold}{red}{error_t}:{reset}{white} {message}");
    print(f"    --> {white} file {light_green}{file_path}{white}:{yellow}{line_no}{reset}");

    let line = get_line_from_file(fd, line_no);
    if line != null:
        print(f"   {bold}{line_no} | {reset}{red}{line}{reset}");
    else:
        print(f"   {bold}{line_no} | {reset}{red}Error reading file{reset}");

    // signal process termination
    (*frame).get_context().crash();
}

/// \section CommentedErrorReporting Example Error Reporting (Commented Section)
///
/// This commented-out section demonstrates how error reporting should look in from the
///      Helix panic handler.
/// \example
/// ```
/// error: expected an '*i32' (pointer) but got an 'i32' (copy) instead
///     --> file tests/main.hlx:1:4
///    1 | let result: i32? = divide(val1, val2);
///      :                    ~~~~~~~^^^^~~~~~~~
///    2 | if result? {
///    3 |     print(f"value: {result}");
///      |
///
///   fix: change the call to 'divide(&val1, val2)' to pass a pointer instead of a value.
///
/// note: the function definition is:
///        --> file tests/main.hlx:4:4
///       4 | fn divide(parm1: *i32, const parm2: i32) -> i32? {
///       5 |     if parm2 == 0:
///       6 |         panic DivideByZero("Attempted to perform div by 0");
///
/// error: aborting due to previous error
/// ```

/*
// no idea why none of this works, for some reason the function get_line_from_file only
//    works once even if reset?

let lines: array::<string?, context_lines>;

// read the lines before the panic line
for let i: usize = 0; i < context_lines; ++i {
    let offset: isize = i - (context_lines / 2);
    let line_index: isize = line_no + offset;
 
    if line_index > 0 {
        print(f"reading line {line_index}");
     
        lseek(fd, 0, SEEK_SET);
        lines[i] = get_line_from_file(fd, line_index);
     
        print(f"line {line_index}: {"null" if (lines[i] == null) else (lines[i] as string)}");
    } else {
        lines[i] = null;
    }
}

for let i: usize = 0; i < context_lines; ++i {
    let displayed_line_no: isize = line_no - (context_lines / 2) + i;
 
    if lines[i] != null {
        let is_panic_line: bool = (i == (context_lines / 2));
     
        let prefix = (f"{bold}{displayed_line_no} | {red}"
                 if      is_panic_line
                 else f"{displayed_line_no} | ");
     
        print(f"   {prefix}{lines[i]}{reset}");
    } else {
        print(f"   {bold}{displayed_line_no} | {reset}{red}Error reading file{reset}");
    }
}
*/