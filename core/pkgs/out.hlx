//===----------------------------------------- Helix ------------------------------------------===//
//                                                                                                //
// Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).        //
// You are allowed to use, modify, redistribute, and create derivative works, even for commercial //
// purposes, provided that you give appropriate credit, and indicate if changes were made.        //
// For more information, please visit: https://creativecommons.org/licenses/by/4.0/               //
//                                                                                                //
// SPDX-License-Identifier: CC-BY-4.0                                                             //
// Copyright (c) 2024 (CC BY 4.0)                                                                 //
//                                                                                                //
//===------------------------------------------------------------------------------------------===//
/// std::io::out - this is the internal code for print

ffi "c++" priv import <iostream> as cpp__io;

interface StringConvert {
    fn to_string() -> string;
}

// Monomorphized generic
fn print(...args: T | U, sep: T = " ", end: T = "\n", flush: bool = false)
  requires <T, U> if T is StringConvert {
    let out: string = "";

    for arg in args {
        if arg is T {
            out += arg.to_string();
        } else {
            out += f"<Non-StringConvert at {*arg as hex}>";
        }
    }

    out = out.strip(*sep) + *end;

    ffi "C++" {
        cpp__io::std::cout << out;

        if flush {
            cpp__io::std::cout.flush();
        }
    }
}

/* ---------------------------------- usage --------------------------------- */

/*
    Deriving from `StringConvert` is optional as long as `Foo` implements all
    methods of the interface. This allows `Foo` to satisfy generic constraints:

    - `Foo` will pass a generic constraint like `T: StringConvert`.
    - However, `Foo` will fail a direct type check for the interface, e.g.,
        `if foo is StringConvert`. If `Foo` does not explicitly derive `StringConvert`,
        it will fail this check.
    - Conversely, `Foo` will pass type-based checks such as:
        `type StringConvertType requires <T> if StringConvert;`
        `let foo: StringConvertType<Foo> = Foo{};`

    In this case, `Foo` would be valid because it contains all the methods of
    `StringConvert` without necessarily deriving from it.
*/
struct Foo : StringConvert {
    fn to_string() -> string {
        return "Foo";
    }
}

class Bar {}

fn main() {
    print("Hello, ", Foo(), "World!", end="\n"); // Hello, Foo World!
    print("Hello, ", Bar(), "World!"); // Hello, <Non-StringConvert at 0x...> World!
}
