///--- The Helix Project ------------------------------------------------------------------------///
///                                                                                              ///
///   Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).    ///
///   You are allowed to use, modify, redistribute, and create derivative works, even for        ///
///   commercial purposes, provided that you give appropriate credit, and indicate if changes    ///
///   were made.                                                                                 ///
///                                                                                              ///
///   For more information on the license terms and requirements, please visit:                  ///
///     https://creativecommons.org/licenses/by/4.0/                                             ///
///                                                                                              ///
///   SPDX-License-Identifier: CC-BY-4.0                                                         ///
///   Copyright (c) 2024 The Helix Project (CC BY 4.0)                                           ///
///                                                                                              ///
///-------------------------------------------------------------------------------- Lib-Helix ---///

#[trivially_import(true)] // prevents wrapping IR in a `handler` module, keeping the handler globally accessible

/// \file
/// Implements the global panic handler for the Helix runtime.
///
/// This file defines the `HX_FN_Vi_Q5_32_helix_default_panic_handler_Q3_5_5_stdPanicFrame_C_PK_Rv` function to manage
/// runtime panics. It logs error details and provides debugging information while ensuring
/// inter-operation with C++ libraries through FFI.
///
/// Attributes:
/// - `#[trivially_import(true)]`: Prevents the compiler from wrapping the Intermediate Representation (IR) in a module.
/// - `ffi "c++" import "include/lang/panic.h";`: Links to the C++ runtime header for compatibility.
///
/// \note This panic handler is globally accessible to any Helix module that wildcard-imports `core.hlx`.

ffi "c++" import "include/runtime/__panic/panic.hh";
// ffi "c++" import "include/runtime/__panic/stacktrace.hh";

/// \brief Displays runtime panic details and signals program termination.
///
/// This function is invoked when the program encounters an unrecoverable error.
/// It logs the file, line, and reason for the panic, providing developers with
/// actionable information for debugging.
///
/// \param frame
///   A pointer to `std::Panic::Frame` that contains details about the panic:
///   - `file`:   The name of the file where the panic occurred.
///   - `line`:   The line number where the panic was triggered.
///   - `reason`: A description of the reason for the panic.
///
/// \details
/// The function performs the following tasks:
/// 1. Logs the panic details, including the file, line, and reason.
/// 2. Displays a message to signal that the program cannot recover.
///
/// \note The `#[trivially_import(true)]` attribute ensures global visibility of the handler function.
///
/// \see include/lang/panic.hh for C++ runtime definitions.
fn HX_FN_Vi_Q5_32_helix_default_panic_handler_Q3_5_5_stdPanicFrame_C_PK_Rv(const frame: *std::Panic::Frame) {
    const file_path: string = (*frame).file();
    const message:   string = (*frame).reason();
    const line_no:   usize  = (*frame).line();
    const eval if defined(_MSC_VER) {
        const error_t: string = string((*((*frame).get_context())).type_name()).split(" ")[1];
    } else {
        const error_t: string = (*((*frame).get_context())).type_name();
    }

    const bold:        string = "\033[1m";
    const red:         string = "\033[31m";
    const reset:       string = "\033[0m";
    const cyan:        string = "\033[36m";
    const green:       string = "\033[32m";
    const white:       string = "\033[97m";
    const yellow:      string = "\033[33m";
    const light_green: string = "\033[92m";

    fn read_file(const file: *string) -> string? {
        var content = libcxx::ifstream(std::string_to_sstring(*file).raw(), libcxx::ios::binary);
    
        if !content {
            return null;
        }

        var utf8_str = libcxx::string((libcxx::istreambuf_iterator<std::Legacy::char>(content)), libcxx::istreambuf_iterator::<std::Legacy::char>());
        
        var conv: libcxx::wstring_convert::<libcxx::codecvt_utf8::<char>>;
        var wide = string(conv.from_bytes(utf8_str));
        
        if wide.length() > 0 {
            return wide;
        }

        return null;
    }

    fn lines_in_file(const content: *string) -> usize {
        var current_line: usize = 1;
        var i: usize = 0;
        var len: usize = (*content).length();

        while i < len {
            var ch: char = (*content)[i];

            if ch == '\n' {
                ++current_line;
                ++i;
            } else if ch == '\r' && (i + 1 < len) && (*content)[i + 1] == '\n' {
                ++current_line;
                i += 2;
            } else {
                ++i;
            }
        }

        return current_line;
    }

    fn get_line(line_no: usize, const content: *string) -> string? {
        var current_line: usize = 1;
        var line: string;
        var i: usize = 0;
        var len: usize = (*content).length();

        while i < len {
            var ch: char = (*content)[i];

            if ch == '\n' {
                if current_line == line_no {
                    return line;
                }
                line.clear();
                ++current_line;
                ++i;
            } else if ch == '\r' && (i + 1 < len) && (*content)[i + 1] == '\n' {
                if current_line == line_no {
                    return line;
                }
                line.clear();
                ++current_line;
                i += 2;
            } else {
                line += ch;
                ++i;
            }
        }

        if current_line == line_no {
            return line;
        }

        return null;
    }

    var print_error_reading_file = fn (const file: *string, line_num: usize) {
        print(bold + red + error_t + ":" + reset + white + " file could not be read " + light_green + " " + (*file) + white + ":" + yellow + std::to_string(line_num) + reset + ". Maybe the file was moved or deleted?");
        print("    " + bold + red + "panic reason:" + reset + white + " " + message);
    };

    const question_file_content: string? = read_file(&file_path);

    if question_file_content == null {
        print_error_reading_file(&file_path, line_no);
        (*((*frame).get_context())).crash();
    }

    const file_content: string = question_file_content as string;
    var total_lines = lines_in_file(&file_content);
    
    if line_no > total_lines {
        print_error_reading_file(&file_path, line_no);
        (*((*frame).get_context())).crash();
    }

    var line: string? = get_line(line_no, &file_content);

    if line == null {
        print_error_reading_file(&file_path, line_no);
        (*((*frame).get_context())).crash();
    }

    // format the line number to fit in a 5 character space + 1 space
    var line_no_str: string = std::to_string(line_no);
    var spaces: string;
    
    for var i: usize = line_no_str.length(); i < 4; ++i {
        spaces += " ";
    }

    line_no_str = spaces + line_no_str + " ";

    print(red + "panic: " + reset + yellow + error_t + reset + "(" + bold + message + reset + ")");
    print("    --> " + white + " file " + light_green + file_path + white + ":" + yellow + std::to_string(line_no) + reset);
    print(line_no_str + "| " + reset + line);
    
    var marker: string;
    var spaces_ended: bool = false;

    for var i: usize = 0; i < (*line).length(); ++i {
        if (*line)[i] == ' ' {
            if !spaces_ended {
                marker += " ";
            }
        } else {
            spaces_ended = true;
            marker += "^";
        }
    }
    print("     | " + red + marker + reset + "\n");

    // var trace = std::StackTrace::get_frames(10);
    
    // for frame in trace {
    //     print(f"function: {frame.function}, file: {frame.file}, line: {frame.line}");
    // }

    (*((*frame).get_context())).crash();
}

/// \section CommentedErrorReporting Example Error Reporting (Commented Section)
///
/// This commented-out section demonstrates how error reporting should look in from the
///      Helix panic handler.
/// \example
/// ```
/// error: expected an '*i32' (pointer) but got an 'i32' (copy) instead
///     --> file tests/main.hlx:1:4
///    1 | var result: i32? = divide(val1, val2);
///      :                    ~~~~~~~^^^^~~~~~~~
///    2 | if result? {
///    3 |     print(f"value: {result}");
///      |
///
///   fix: change the call to 'divide(&val1, val2)' to pass a pointer instead of a value.
///
/// note: the function definition is:
///        --> file tests/main.hlx:4:4
///       4 | fn divide(parm1: *i32, const parm2: i32) -> i32? {
///       5 |     if parm2 == 0:
///       6 |         panic DivideByZero("Attempted to perform div by 0");
///
/// error: aborting due to previous error
/// ```
