///--- The Helix Project ------------------------------------------------------------------------///
///                                                                                              ///
///   Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).    ///
///   You are allowed to use, modify, redistribute, and create derivative works, even for        ///
///   commercial purposes, provided that you give appropriate credit, and indicate if changes    ///
///   were made.                                                                                 ///
///                                                                                              ///
///   For more information on the license terms and requirements, please visit:                  ///
///     https://creativecommons.org/licenses/by/4.0/                                             ///
///                                                                                              ///
///   SPDX-License-Identifier: CC-BY-4.0                                                         ///
///   Copyright (c) 2024 The Helix Project (CC BY 4.0)                                           ///
///                                                                                              ///
///-------------------------------------------------------------------------------- Lib-Helix ---///
#[trivially_import(true)] // prevents wrapping IR in a `abi` module, keeping the handler globally accessible

module std::abi {
    enum ObjectType {
        Module,
        Class,
        Struct,
        Function,
        Operator,
        Reserved,
        Internal,
        None
    }

    fn mangle(const input: ref!(string), ty: ObjectType) -> string? {
        if (input.empty()) {
            panic std::Error::StateMismatchError("Input string cannot be empty");
        }

        var prefix: string;

        switch (ty) {
            case ObjectType::Module {
                (prefix = "_$M_");
                break;
            } case ObjectType::Class {
                (prefix = "_$C_");
                break;
            } case ObjectType::Struct {
                (prefix = "_$S_");
                break;
            } case ObjectType::Function {
                (prefix = "_$F_");
                break;
            } case ObjectType::Operator {
                (prefix = "_$O_");
                break;
            } case ObjectType::Reserved {
                (prefix = "_$R_");
                break;
            } case ObjectType::Internal {
                (prefix = "_$I_");
                break;
            } default {
                panic std::Error::StateMismatchError("Invalid ObjectType");
            }
        }

        var output: string = prefix;

        for ch in input {
            if (libcxx::isalnum(ch) || ch == '_') {
                output += ch;
            } else {
                output += '$';
                var hex: std::Memory::buffer::<char, 4>;
                swprintf(hex, 4, "%02X".raw(), ch as i32);
                output += hex;
            }
        }

        output += "$L";
        output += std::to_string(input.length()) + "_E$";

        return output;
    }

    fn demangle(const input: ref!(string), ty: ObjectType) -> string? {
        var expected_prefix: string;

        switch (ty) {
            case ObjectType::Module {
                (expected_prefix = "_$M_");
                break;
            } case ObjectType::Class {
                (expected_prefix = "_$C_");
                break;
            } case ObjectType::Struct {
                (expected_prefix = "_$S_");
                break;
            } case ObjectType::Function {
                (expected_prefix = "_$F_");
                break;
            } case ObjectType::Operator {
                (expected_prefix = "_$O_");
                break;
            } case ObjectType::Reserved {
                (expected_prefix = "_$R_");
                break;
            } case ObjectType::Internal {
                (expected_prefix = "_$I_");
                break;
            } default {
                panic std::Error::StateMismatchError("Invalid ObjectType");
            }
        }

        if (!input.starts_with(expected_prefix)) {
            panic std::Error::StateMismatchError("Invalid mangled name or type mismatch");
        }

        var len_pos: usize = input.rfind("$L");
        if (len_pos == string::npos) {
            panic std::Error::StateMismatchError("Invalid mangled name: missing length");
        }

        var end_pos: usize = input.rfind("_E$");
        if (end_pos == string::npos || end_pos <= len_pos) {
            panic std::Error::StateMismatchError("Invalid mangled name: missing or misplaced end marker");
        }

        var len_str: string = input.subslice(len_pos + 2, end_pos - len_pos - 2);
        if (len_str.empty()) {
            panic std::Error::StateMismatchError("Invalid length in mangled name");
        }

        var expected_len: usize;
        try {
            expected_len = libcxx::stoul(len_str.raw()) as usize;
        } catch {
            panic std::Error::StateMismatchError("Invalid length in mangled name");
        }

        var encoded: string = input.subslice(expected_prefix.length(), len_pos - expected_prefix.length());
        var output: string;

        var i: usize = 0;
        while (i < encoded.length()) {
            if (encoded[i] == '$' && i + 2 < encoded.length()) {
                var hex: string = encoded.subslice(i + 1, 2);
                try {
                    var ch: char = (libcxx::stoul(hex.raw(), &null, 16)) as char;
                    output += ch;
                    i += 3;
                } catch {
                    panic std::Error::StateMismatchError("Invalid hex encoding in mangled name");
                }
            } else {
                output += encoded[i];
                i += 1;
            }
        }

        if (output.length() != expected_len) {
            panic std::Error::StateMismatchError("Demangled length mismatch");
        }

        return output;
    }

    fn is_mangled(const input: ref!(string)) -> ObjectType {
        if (input.length() < 4 || input[0] != '_' || input[1] != '$') {
            return ObjectType::None;
        }

        var prefix: string = input.subslice(0, 4);

        if (prefix == "_$M_") {
            return ObjectType::Module;
        }
        if (prefix == "_$C_") {
            return ObjectType::Class;
        }
        if (prefix == "_$S_") {
            return ObjectType::Struct;
        }
        if (prefix == "_$F_") {
            return ObjectType::Function;
        }
        if (prefix == "_$O_") {
            return ObjectType::Operator;
        }
        if (prefix == "_$R_") {
            return ObjectType::Reserved;
        }
        if (prefix == "_$I_") {
            return ObjectType::Internal;
        }

        return ObjectType::None;
    }

    fn demangle_parttial(const input: ref!(string)) -> string {
        var output: string;
        var i: usize = 0;

        while (i < input.length()) {
            // Check for potential mangled name starting with "_$"
            if (i + 3 < input.length() && input[i] == '_' && input[i + 1] == '$') {
                // Validate full prefix (e.g., "_$M_")
                var prefix: string = input.subslice(i, 4);
                var type_char: char = input[i + 2];
                if ((type_char == 'M' || type_char == 'C' || type_char == 'S' ||
                    type_char == 'F' || type_char == 'O' || type_char == 'R' || type_char == 'I') &&
                    input[i + 3] == '_') {
                    // Look for "_E$" to find the end of the mangled segment
                    var end_pos: usize = input.lfind("_E$", i);
                    if (end_pos != string::npos) {
                        // Extract the mangled segment including "_E$"
                        var mangled: string = input.subslice(i, end_pos - i + 3);
                        var ty: ObjectType = is_mangled(mangled);
                        
                        if (ty != ObjectType::None) {
                            var demangled: string = demangle(mangled, ty);
                            output += demangled;
                        } else {
                            output += mangled; // Not a valid mangled name, keep as is
                        }
                        
                        i = end_pos + 3; // Move past "_E$"
                        continue;
                    }
                }
            }
            // Not a mangled segment, copy the character
            output += input[i];
            i += 1;
        }

        return output;
    }
} // end module std::abi